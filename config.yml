rabbitmq:
  # Connection in the form of 'amqp://[user]:[password]@[host]:[port]?heartbeat=[heartbeat]'
  connection:
    # RabbitMQ host
    host: ${RABBITMQ_HOST}:localhost
    # RabbitMQ AMQP port. Used by AMQP 0-9-1 and 1.0 clients without and with TLS
    port: ${RABBITMQ_PORT}:5672
    # RabbitMQ user
    user: ${RABBITMQ_USER}:alkemio-admin
    # RabbitMQ password
    password: ${RABBITMQ_PASSWORD}:alkemio!
    # heartbeat
    heartbeat: ${RABBITMQ_HEARTBEAT}:30

monitoring:
  logging:
    # A flag setting whether Winston Console transport will be enabled.
    # If the flag is set to true logs of the appropriate level (see below) will be outputted to the console
    # after the application has been bootstrapped.
    # The NestJS bootstrap process is handled by the internal NestJS logging.
    enabled: ${LOGGING_CONSOLE_ENABLED}:true
    # Logging level for outputs to console.
    # Valid values are log|error|warn|debug|verbose.
    level: ${LOGGING_LEVEL_CONSOLE}:verbose
    # The logging format will be in json - useful for parsing
    # if disabled - will be in a human-readable form
    json: ${LOGGING_FORMAT_JSON}:false

settings:
  # application level settings
  application:
    # queue
    queue: ${QUEUE}:auth
    # MILLISECONDS wait time for a response after a request on the message queue
    queue_response_timeout: ${QUEUE_RESPONSE_TIMEOUT}:10000
  # the collaboration experience
  collaboration:
    enabled: ${ENABLED}:true
    #
    port: ${COLLABORATION_PORT}:4002
    # the window in which contributions are accepted to be counted towards a single contribution event;
    # time is in SECONDS
    contribution_window: ${CONTRIBUTION_WINDOW}:600
    # SECONDS between auto saves
    save_interval: ${AUTOSAVE_INTERVAL}:15
    # SECONDS to wait for an acknowledgment that the save is successful, before retrying
    save_timeout: ${AUTOSAVE_TIMEOUT}:20
    # Amount of consecutive failed attempts to save before a collaborator is not picked for auto save
    # This is useful when you want to avoid a lot of errors, or to mark a client not being reliable to save
    save_consecutive_failed_attempts: ${SAVE_CONSECUTIVE_FAILED_ATTEMPTS}:5
    # SECONDS of inactivity before a collaborator is made view-only
    collaborator_inactivity: ${COLLABORATOR_INACTIVITY}:1800
    # how often the inactivity timer is reset;
    # you want it to be large enough to not reset too frequently,
    # but small enough to be accurate
    reset_collaborator_mode_debounce: ${INACTIVITY_DEBOUNCE}:1000
  rest:
    # the REST API
    port: ${REST_PORT}:4005