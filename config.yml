rabbitmq:
  # Connection in the form of 'amqp://[user]:[password]@[host]:[port]?heartbeat=[heartbeat]'
  connection:
    # RabbitMQ host
    host: ${RABBITMQ_HOST}:localhost
    # RabbitMQ AMQP port. Used by AMQP 0-9-1 and 1.0 clients without and with TLS
    port: ${RABBITMQ_PORT}:5672
    # RabbitMQ user
    user: ${RABBITMQ_USER}:alkemio-admin
    # RabbitMQ password
    password: ${RABBITMQ_PASSWORD}:alkemio!
    # heartbeat
    heartbeat: ${RABBITMQ_HEARTBEAT}:30

elasticsearch:
  host: ${ELASTICSEARCH_URL}
  api_key: ${ELASTICSEARCH_API_KEY}
  retries: ${ELASTICSEARCH_RETRIES}:3
  timeout: ${ELASTICSEARCH_TIMEOUT}:30000
  tls:
    ca_cert_path: ${ELASTIC_TLS_CA_CERT_PATH}:none
    rejectUnauthorized: ${ELASTIC_TLS_REJECT_UNAUTHORIZED}:false

monitoring:
  logging:
    # A flag setting whether Winston Console transport will be enabled.
    # If the flag is set to true logs of the appropriate level (see below) will be outputted to the console
    # after the application has been bootstrapped.
    # The NestJS bootstrap process is handled by the internal NestJS logging.
    enabled: ${LOGGING_CONSOLE_ENABLED}:true
    # Logging level for outputs to console.
    # Valid values are log|error|warn|debug|verbose.
    level: ${LOGGING_LEVEL_CONSOLE}:verbose
    # The logging format will be in json - useful for parsing
    # if disabled - will be in a human-readable form
    json: ${LOGGING_FORMAT_JSON}:false
    events:
      # The index responsible for tracking the whiteboard events happening in a particular session
      whiteboard_event_index: ${ELASTIC_INDEX_WHITEBOARD_EVENTS}:whiteboard-change-events
      # The amount of logged information
      # None = disabled;
      # Lite = user + event type;
      # Full = user + event type + delta of what was changed
      mode: ${WHITEBOARD_EVENTS_LOGGING_MODE}:none
      # MILLISECONDS of how long are the events buffered in memory before being sent
      interval: ${WHITEBOARD_EVENTS_LOGGING_INTERVAL}:3000


settings:
  # application level settings
  application:
    # On which port the server will be running
    port: ${PORT}:4002
    # queue
    queue: ${QUEUE}:alkemio-whiteboards
    # MILLISECONDS wait time for a response after a request on the message queue
    queue_response_timeout: ${QUEUE_RESPONSE_TIMEOUT}:5000
    # How many times the requests to retry before failing
    queue_request_retries: ${QUEUE_REQUEST_RETRIES}:3
    # How many ms without a pong packet to consider the connection closed
    ping_timeout: ${PING_TIMEOUT}:40000
    # How many ms before sending a new ping packet
    ping_interval: ${PING_INTERVAL}:30000
    # How many bytes or characters a message can be, before closing the session (to avoid DoS).
    max_http_buffer_size: ${MAX_HTTP_BUFFER_SIZE}:4e6
  # the collaboration experience
  collaboration:
    enabled: ${ENABLED}:true
    # the window in which contributions are accepted to be counted towards a single contribution event;
    # time is in SECONDS
    contribution_window: ${CONTRIBUTION_WINDOW}:600
    # MILLISECONDS after the first change was made to the whiteboard before it's autosaved.
    # This is preventing saving on every change - instead, all the changes done in the last interval are saved only once.
    save_interval: ${AUTOSAVE_INTERVAL}:2000
    # SECONDS of inactivity before a collaborator is made view-only
    collaborator_inactivity: ${COLLABORATOR_INACTIVITY}:1800
    # how often the inactivity timer is reset;
    # you want it to be large enough to not reset too frequently,
    # but small enough to be accurate
    reset_collaborator_mode_debounce: ${INACTIVITY_DEBOUNCE}:1000
  rest:
    # the REST API
    port: ${REST_PORT}:4005
